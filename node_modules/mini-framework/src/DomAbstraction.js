import { events, onEvent, triggerCustomEvent } from "./EventManager.js";

/**
 * Create a DOM element with optional attributes and children.
 *
 * @param {string} elementType - The type of DOM element to create (e.g., 'div', 'a', 'p').
 * @param {object} attributes - An object containing element attributes as key-value pairs.
 * @param {Array} children - An array of child elements or text to be appended to the created element.
 * @returns {ElementObject} - An object representing a DOM element with various event handling functions
 */
export function createDOMElement(elementType, attributes, children) {
    const element = document.createElement(elementType);

    if (attributes && typeof attributes === 'object') {
        for (const key in attributes) {
            element.setAttribute(key, attributes[key]);
        }
    }

    if (children && Array.isArray(children)) {
        children.forEach(child => {
            if (typeof child === "object" && "element" in child) {
                child = child.element
            }

            if (child instanceof HTMLElement) {
                element.appendChild(child);
            } else {
                element.appendChild(document.createTextNode(child));
            }
        });
    }

    /**
   * An object representing a DOM element with various event handling functions.
   * @typedef {Object} ElementObject
   * @property {HTMLElement} element - The HTML element associated with the object.
   * @property {(callback: Function) => ElementObject} onClick$ - Adds a click event listener to the associated HTML element.
   * @property {(callback: Function) => ElementObject} onKeyDown$ - Adds a keydown event listener to the associated HTML element.
   * @property {(callback: Function) => ElementObject} onKeyUp$ - Adds a keyup event listener to the associated HTML element.
   * @property {(callback: Function) => ElementObject} onMouseEnter$ - Adds a mouseenter event listener to the associated HTML element.
   * @property {(callback: Function) => ElementObject} onScroll$ - Adds a scroll event listener to the associated HTML element.
   * @property {(callback: Function) => ElementObject} onChange$ - Adds a change event listener to the associated HTML element.
   * @property {(eventName: string, callback: Function) => ElementObject} onCustomEvent$ - Adds a custom event listener to the associated HTML element.
   * @property {(eventName: string, eventDetail?: Object) => ElementObject} triggerCustomEvent$ - Triggers a custom event on the associated HTML element.
   */

    const elementObject = {
        element: element,
        onClick$(callback) {
            onEvent(events.CLICK, this.element, callback);
            return this;
        },

        onKeyDown$(callback) {
            onEvent(events.KEYDOWN, this.element, callback);
            return this;
        },

        onKeyUp$(callback) {
            onEvent(events.KEYUP, this.element, callback);
            return this;
        },

        onMouseEnter$(callback) {
            onEvent(events.MOUSEENTER, this.element, callback);
            return this;
        },

        onScroll$(callback) {
            onEvent(events.SCROLL, this.element, callback);
            return this;
        },

        onChange$(callback) {
            onEvent(events.CHANGE, this.element, callback);
            return this;
        },

        onCustomEvent$(eventName, callback) {
            onEvent(eventName, this.element, callback);
            return this;
        },

        triggerCustomEvent$(eventName, eventDetail) {
            triggerCustomEvent(eventName, this.element, eventDetail);
            return this;
        },
    };

    return elementObject;
}
