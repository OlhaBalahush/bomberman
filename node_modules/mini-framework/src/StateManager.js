/**
 * Create a custom state manager for managing application state.
 *
 * @param {any} initialState - The initial state value for the state manager.
 * @returns {object} An object with methods for managing state.
 */

export function useStateManager(initialState) {
    // Initialize the state and listeners.
    let state = initialState;
    const listeners = [];

    /**
     * Get the current state.
     * @returns {any} The current state.
     */
    function getState() {
        return state;
    }

    /**
     * Set the state to a new value and notify subscribers.
     * @param {any} newState - The new state value.
     */
    function setState(newState) {
        state = newState;
        listeners.forEach((listener) => listener(state));
    }

    /**
     * Subscribe to state changes.
     * @param {function} listener - A callback function to be called when the state changes.
     * @returns {function} An unsubscribe function to stop listening to state changes.
     */
    function subscribe(listener) {
        listeners.push(listener);
        return () => {
            listeners = listeners.filter((l) => l !== listener);
        };
    }

    return { getState, setState, subscribe };
}